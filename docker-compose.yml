version: "3"
services:

  web:
    image: nginx:latest  # Using the official NGINX image
    container_name: nginx-container
    ports:
      - "80:80"  # Exposing port 80 for HTTP traffic
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount your custom NGINX configuration file
      - ./monitoring/nginx/html:/usr/share/nginx/html  # Mount the directory containing your static files

  consul1:
    image: consul:1.14.5
    container_name: consul1
    ports:
      - "8500:8500"         # Web UI
      - "8600:8600/udp"     # DNS service
    environment:
      CONSUL_BIND_INTERFACE: eth0
    command: agent -server -bootstrap-expect=2 -node=consul1 -bind=0.0.0.0 -ui -client=0.0.0.0 -retry-join=consul2
    networks:
      - monitoring
  consul2:
    image: consul:1.14.5
    container_name: consul2
    ports:
      - "8501:8500"         # Web UI (different port for the second instance)
      - "8601:8600/udp"     # DNS service (different port for the second instance)
    environment:
      CONSUL_BIND_INTERFACE: eth0
    command: agent -server -bootstrap-expect=2 -node=consul2 -bind=0.0.0.0 -ui -client=0.0.0.0 -retry-join=consul1
    networks:
      - monitoring

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:2.1.0
    container_name: tempo
    volumes:
      - /monitoring/tempo/data/:/var/tempo  # Local storage path for trace data
    command:
      - "-storage.trace.backend=local"                  # tell tempo where to permanently put traces
      - "-storage.trace.local.path=/tmp/tempo/traces"
      - "-storage.trace.wal.path=/tmp/tempo/wal"        # tell tempo where to store the wal
      - "-auth.enabled=false"                           # disables the requirement for the X-Scope-OrgID header
      - "-server.http-listen-port=3200"
    ports:
      - "3200:3200"
      - "4317:4317"
    restart: always  # Restart on failure
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: 'prometheus'
    volumes:
      - ./monitoring/prometheus/config:/etc/prometheus/
      - ./monitoring/prometheus/config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./monitoring/prometheus/data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - monitoring
    restart: always

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./monitoring/grafana/provisioning/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./monitoring/grafana/dashboards/:/etc/grafana/dashboards/
      - ./monitoring/grafana/data:/var/lib/grafana  # Add this line for data persistence
      - ./monitoring/grafana/alertmanager/alertmanager.yml:/etc/grafana/alertmanager.yml
    environment:
      - GF_ALERTING_ENABLED=true
      - GF_ALERTING_CONFIG_FILE=/etc/grafana/alertmanager.yml
    env_file:
      - ./monitoring/grafana/config.monitoring
    networks:
      - monitoring
    depends_on:
      - prometheus
      - tempo

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - "./monitoring/alertmanager/alertmanager.yml:/config/alertmanager.yml"
    networks:
      - monitoring
    depends_on:
      - prometheus

  zipkin:
    image: openzipkin/zipkin:2.23.1
    container_name: 'zipkin'
    networks:
      - monitoring
    ports:
      - '9411:9411'

networks:
  monitoring:
    driver: bridge
